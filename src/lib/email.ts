import { Resend } from 'resend';

// Initialize Resend
const resend = process.env.RESEND_API_KEY ? new Resend(process.env.RESEND_API_KEY) : null;

if (!process.env.RESEND_API_KEY) {
  console.warn('RESEND_API_KEY not found - email functionality will be disabled');
}

export interface PersonaEmailData {
  jobId: string;
  email: string;
  websiteUrl: string;
  keywords: string;
  personaReport: string;
  planName: string;
  analysisDate: string;
}

export async function sendPersonaReport(data: PersonaEmailData): Promise<boolean> {
  console.log('üîç Email send attempt starting...', {
    hasResend: !!resend,
    email: data.email,
    jobId: data.jobId,
    resendKeyConfigured: !!process.env.RESEND_API_KEY,
    resendKeyLength: process.env.RESEND_API_KEY?.length || 0
  });

  if (!resend) {
    console.error('‚ùå Resend not configured - cannot send email');
    console.error('RESEND_API_KEY present:', !!process.env.RESEND_API_KEY);
    console.error('RESEND_API_KEY length:', process.env.RESEND_API_KEY?.length || 0);
    return false;
  }

  try {
    console.log(`üìß Sending persona report to ${data.email} for job ${data.jobId}`);
    
    const htmlContent = generatePersonaEmailHTML(data);
    const textContent = generatePersonaEmailText(data);

    console.log('üìù Email content generated, sending via Resend...');

    const result = await resend.emails.send({
      from: 'Persona Generator <reports@bildur.ai>',
      to: [data.email],
      subject: `Your Customer Persona Analysis is Ready - ${data.websiteUrl}`,
      html: htmlContent,
      text: textContent,
    });

    console.log('‚úÖ Resend API response:', {
      success: !!result.data,
      emailId: result.data?.id,
      error: result.error
    });

    if (result.error) {
      console.error('‚ùå Resend API error:', result.error);
      return false;
    }

    console.log(`‚úÖ Email sent successfully: ${result.data?.id}`);
    return true;

  } catch (error) {
    console.error('‚ùå Failed to send persona report email:', error);
    if (error instanceof Error) {
      console.error('Error details:', {
        message: error.message,
        stack: error.stack
      });
    }
    return false;
  }
}

function generatePersonaEmailHTML(data: PersonaEmailData): string {
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Customer Persona Analysis</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 30px; }
    .header h1 { margin: 0; font-size: 28px; }
    .subtitle { margin: 10px 0 0 0; opacity: 0.9; font-size: 16px; }
    .summary { background: #f8f9fa; padding: 25px; border-radius: 8px; margin-bottom: 30px; border-left: 4px solid #667eea; }
    .summary h2 { margin-top: 0; color: #667eea; }
    .persona-content { background: white; padding: 30px; border: 1px solid #e9ecef; border-radius: 8px; margin-bottom: 30px; }
    .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; border-top: 1px solid #eee; }
    .btn { display: inline-block; background: #667eea; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 10px 0; }
    .meta { font-size: 14px; color: #666; margin-bottom: 20px; }
    .keywords { background: #e3f2fd; padding: 10px; border-radius: 5px; margin: 10px 0; }
    pre { background: #f8f9fa; padding: 20px; border-radius: 5px; white-space: pre-wrap; font-size: 14px; line-height: 1.5; overflow-x: auto; }
  </style>
</head>
<body>
  <div class="header">
    <h1>üéØ Your Customer Persona Analysis</h1>
    <p class="subtitle">Deep insights into your target customers</p>
  </div>

  <div class="summary">
    <h2>Analysis Summary</h2>
    <div class="meta">
      <strong>Website:</strong> ${data.websiteUrl}<br>
      <strong>Analysis Date:</strong> ${data.analysisDate}<br>
      <strong>Plan:</strong> ${data.planName}<br>
      <strong>Job ID:</strong> ${data.jobId}
    </div>
    <div class="keywords">
      <strong>Keywords Analyzed:</strong> ${data.keywords}
    </div>
  </div>

  <div class="persona-content">
    <h2>üìä Your Detailed Persona Report</h2>
    <pre>${data.personaReport}</pre>
  </div>

  <div class="footer">
    <p>Generated by <strong>Persona Generator</strong> - AI-Powered Customer Research</p>
    <p>Need help interpreting these insights? Reply to this email with any questions.</p>
    <p style="font-size: 12px; color: #999;">
      This report contains proprietary analysis based on your specific business data.
      Please keep this information confidential.
    </p>
  </div>
</body>
</html>`;
}

function generatePersonaEmailText(data: PersonaEmailData): string {
  return `
üéØ YOUR CUSTOMER PERSONA ANALYSIS

Analysis Complete for: ${data.websiteUrl}
Generated: ${data.analysisDate}
Plan: ${data.planName}
Job ID: ${data.jobId}

Keywords Analyzed: ${data.keywords}

üìä DETAILED PERSONA REPORT
${data.personaReport}

---

Generated by Persona Generator - AI-Powered Customer Research
Need help with these insights? Reply to this email.

This report contains proprietary analysis based on your specific business data.
Please keep this information confidential.
`;
}

export async function sendTestEmail(email: string): Promise<boolean> {
  if (!resend) {
    console.error('Resend not configured - cannot send test email');
    return false;
  }

  try {
    const result = await resend.emails.send({
      from: 'Persona Generator <reports@bildur.ai>',
      to: [email],
      subject: 'Test Email - Persona Generator',
      html: '<h1>Test Email</h1><p>This is a test email to verify Resend integration.</p>',
      text: 'Test Email - This is a test email to verify Resend integration.',
    });

    console.log('Test email sent successfully:', result.data?.id);
    return true;
  } catch (error) {
    console.error('Failed to send test email:', error);
    return false;
  }
}